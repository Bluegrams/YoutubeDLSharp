// <auto-generated>
// This code was partially generated by a tool.
// </auto-generated>

using System;

namespace YoutubeDLSharp.Options
{
    public partial class OptionSet
    {
        private Option<bool> getDescription = new Option<bool>("--get-description");
        private Option<bool> getDuration = new Option<bool>("--get-duration");
        private Option<bool> getFilename = new Option<bool>("--get-filename");
        private Option<bool> getFormat = new Option<bool>("--get-format");
        private Option<bool> getId = new Option<bool>("--get-id");
        private Option<bool> getThumbnail = new Option<bool>("--get-thumbnail");
        private Option<bool> getTitle = new Option<bool>("-e", "--get-title");
        private Option<bool> getUrl = new Option<bool>("-g", "--get-url");
        private Option<string> matchTitle = new Option<string>("--match-title");
        private Option<string> rejectTitle = new Option<string>("--reject-title");
        private Option<long?> minViews = new Option<long?>("--min-views");
        private Option<long?> maxViews = new Option<long?>("--max-views");
        private Option<string> userAgent = new Option<string>("--user-agent");
        private Option<string> referer = new Option<string>("--referer");
        private Option<int?> playlistStart = new Option<int?>("--playlist-start");
        private Option<int?> playlistEnd = new Option<int?>("--playlist-end");
        private Option<bool> playlistReverse = new Option<bool>("--playlist-reverse");
        private Option<bool> forceGenericExtractor = new Option<bool>("--force-generic-extractor");
        private Option<string> execBeforeDownload = new Option<string>("--exec-before-download");
        private Option<bool> noExecBeforeDownload = new Option<bool>("--no-exec-before-download");
        private Option<bool> allFormats = new Option<bool>("--all-formats");
        private Option<bool> allSubs = new Option<bool>("--all-subs");
        private Option<bool> printJson = new Option<bool>("--print-json");
        private Option<string> autonumberSize = new Option<string>("--autonumber-size");
        private Option<int?> autonumberStart = new Option<int?>("--autonumber-start");
        private Option<bool> id = new Option<bool>("--id");
        private Option<string> metadataFromTitle = new Option<string>("--metadata-from-title");
        private Option<bool> hlsPreferNative = new Option<bool>("--hls-prefer-native");
        private Option<bool> hlsPreferFfmpeg = new Option<bool>("--hls-prefer-ffmpeg");
        private Option<bool> listFormatsOld = new Option<bool>("--list-formats-old");
        private Option<bool> listFormatsAsTable = new Option<bool>("--list-formats-as-table");
        private Option<bool> youtubeSkipDashManifest = new Option<bool>("--youtube-skip-dash-manifest");
        private Option<bool> youtubeSkipHlsManifest = new Option<bool>("--youtube-skip-hls-manifest");

        /// <summary>
        /// Deprecated in favor of: --print description.
        /// </summary>
        [Obsolete("Deprecated in favor of: --print description.")]
        public bool GetDescription { get => getDescription.Value; set => getDescription.Value = value; }
        /// <summary>
        /// Deprecated in favor of: --print duration_string.
        /// </summary>
        [Obsolete("Deprecated in favor of: --print duration_string.")]
        public bool GetDuration { get => getDuration.Value; set => getDuration.Value = value; }
        /// <summary>
        /// Deprecated in favor of: --print filename.
        /// </summary>
        [Obsolete("Deprecated in favor of: --print filename.")]
        public bool GetFilename { get => getFilename.Value; set => getFilename.Value = value; }
        /// <summary>
        /// Deprecated in favor of: --print format.
        /// </summary>
        [Obsolete("Deprecated in favor of: --print format.")]
        public bool GetFormat { get => getFormat.Value; set => getFormat.Value = value; }
        /// <summary>
        /// Deprecated in favor of: --print id.
        /// </summary>
        [Obsolete("Deprecated in favor of: --print id.")]
        public bool GetId { get => getId.Value; set => getId.Value = value; }
        /// <summary>
        /// Deprecated in favor of: --print thumbnail.
        /// </summary>
        [Obsolete("Deprecated in favor of: --print thumbnail.")]
        public bool GetThumbnail { get => getThumbnail.Value; set => getThumbnail.Value = value; }
        /// <summary>
        /// Deprecated in favor of: --print title.
        /// </summary>
        [Obsolete("Deprecated in favor of: --print title.")]
        public bool GetTitle { get => getTitle.Value; set => getTitle.Value = value; }
        /// <summary>
        /// Deprecated in favor of: --print urls.
        /// </summary>
        [Obsolete("Deprecated in favor of: --print urls.")]
        public bool GetUrl { get => getUrl.Value; set => getUrl.Value = value; }
        /// <summary>
        /// Deprecated in favor of: --match-filter &quot;title ~= (?i)REGEX&quot;.
        /// </summary>
        [Obsolete("Deprecated in favor of: --match-filter \"title ~= (?i)REGEX\".")]
        public string MatchTitle { get => matchTitle.Value; set => matchTitle.Value = value; }
        /// <summary>
        /// Deprecated in favor of: --match-filter &quot;title !~= (?i)REGEX&quot;.
        /// </summary>
        [Obsolete("Deprecated in favor of: --match-filter \"title !~= (?i)REGEX\".")]
        public string RejectTitle { get => rejectTitle.Value; set => rejectTitle.Value = value; }
        /// <summary>
        /// Deprecated in favor of: --match-filter &quot;view_count &gt;=? COUNT&quot;.
        /// </summary>
        [Obsolete("Deprecated in favor of: --match-filter \"view_count >=? COUNT\".")]
        public long? MinViews { get => minViews.Value; set => minViews.Value = value; }
        /// <summary>
        /// Deprecated in favor of: --match-filter &quot;view_count &lt;=? COUNT&quot;.
        /// </summary>
        [Obsolete("Deprecated in favor of: --match-filter \"view_count <=? COUNT\".")]
        public long? MaxViews { get => maxViews.Value; set => maxViews.Value = value; }
        /// <summary>
        /// Deprecated in favor of: --add-header &quot;User-Agent:UA&quot;.
        /// </summary>
        [Obsolete("Deprecated in favor of: --add-header \"User-Agent:UA\".")]
        public string UserAgent { get => userAgent.Value; set => userAgent.Value = value; }
        /// <summary>
        /// Deprecated in favor of: --add-header &quot;Referer:URL&quot;.
        /// </summary>
        [Obsolete("Deprecated in favor of: --add-header \"Referer:URL\".")]
        public string Referer { get => referer.Value; set => referer.Value = value; }
        /// <summary>
        /// Deprecated in favor of: -I NUMBER:.
        /// </summary>
        [Obsolete("Deprecated in favor of: -I NUMBER:.")]
        public int? PlaylistStart { get => playlistStart.Value; set => playlistStart.Value = value; }
        /// <summary>
        /// Deprecated in favor of: -I :NUMBER.
        /// </summary>
        [Obsolete("Deprecated in favor of: -I :NUMBER.")]
        public int? PlaylistEnd { get => playlistEnd.Value; set => playlistEnd.Value = value; }
        /// <summary>
        /// Deprecated in favor of: -I ::-1.
        /// </summary>
        [Obsolete("Deprecated in favor of: -I ::-1.")]
        public bool PlaylistReverse { get => playlistReverse.Value; set => playlistReverse.Value = value; }
        /// <summary>
        /// Deprecated in favor of: --ies generic,default.
        /// </summary>
        [Obsolete("Deprecated in favor of: --ies generic,default.")]
        public bool ForceGenericExtractor { get => forceGenericExtractor.Value; set => forceGenericExtractor.Value = value; }
        /// <summary>
        /// Deprecated in favor of: --exec &quot;before_dl:CMD&quot;.
        /// </summary>
        [Obsolete("Deprecated in favor of: --exec \"before_dl:CMD\".")]
        public string ExecBeforeDownload { get => execBeforeDownload.Value; set => execBeforeDownload.Value = value; }
        /// <summary>
        /// Deprecated in favor of: --no-exec.
        /// </summary>
        [Obsolete("Deprecated in favor of: --no-exec.")]
        public bool NoExecBeforeDownload { get => noExecBeforeDownload.Value; set => noExecBeforeDownload.Value = value; }
        /// <summary>
        /// Deprecated in favor of: -f all.
        /// </summary>
        [Obsolete("Deprecated in favor of: -f all.")]
        public bool AllFormats { get => allFormats.Value; set => allFormats.Value = value; }
        /// <summary>
        /// Deprecated in favor of: --sub-langs all --write-subs.
        /// </summary>
        [Obsolete("Deprecated in favor of: --sub-langs all --write-subs.")]
        public bool AllSubs { get => allSubs.Value; set => allSubs.Value = value; }
        /// <summary>
        /// Deprecated in favor of: -j --no-simulate.
        /// </summary>
        [Obsolete("Deprecated in favor of: -j --no-simulate.")]
        public bool PrintJson { get => printJson.Value; set => printJson.Value = value; }
        /// <summary>
        /// Deprecated in favor of: Use string formatting, e.g. %(autonumber)03d.
        /// </summary>
        [Obsolete("Deprecated in favor of: Use string formatting, e.g. %(autonumber)03d.")]
        public string AutonumberSize { get => autonumberSize.Value; set => autonumberSize.Value = value; }
        /// <summary>
        /// Deprecated in favor of: Use internal field formatting like %(autonumber+NUMBER)s.
        /// </summary>
        [Obsolete("Deprecated in favor of: Use internal field formatting like %(autonumber+NUMBER)s.")]
        public int? AutonumberStart { get => autonumberStart.Value; set => autonumberStart.Value = value; }
        /// <summary>
        /// Deprecated in favor of: -o &quot;%(id)s.%(ext)s&quot;.
        /// </summary>
        [Obsolete("Deprecated in favor of: -o \"%(id)s.%(ext)s\".")]
        public bool Id { get => id.Value; set => id.Value = value; }
        /// <summary>
        /// Deprecated in favor of: --parse-metadata &quot;%(title)s:FORMAT&quot;.
        /// </summary>
        [Obsolete("Deprecated in favor of: --parse-metadata \"%(title)s:FORMAT\".")]
        public string MetadataFromTitle { get => metadataFromTitle.Value; set => metadataFromTitle.Value = value; }
        /// <summary>
        /// Deprecated in favor of: --downloader &quot;m3u8:native&quot;.
        /// </summary>
        [Obsolete("Deprecated in favor of: --downloader \"m3u8:native\".")]
        public bool HlsPreferNative { get => hlsPreferNative.Value; set => hlsPreferNative.Value = value; }
        /// <summary>
        /// Deprecated in favor of: --downloader &quot;m3u8:ffmpeg&quot;.
        /// </summary>
        [Obsolete("Deprecated in favor of: --downloader \"m3u8:ffmpeg\".")]
        public bool HlsPreferFfmpeg { get => hlsPreferFfmpeg.Value; set => hlsPreferFfmpeg.Value = value; }
        /// <summary>
        /// Deprecated in favor of: --compat-options list-formats (Alias: --no-list-formats-as-table).
        /// </summary>
        [Obsolete("Deprecated in favor of: --compat-options list-formats (Alias: --no-list-formats-as-table).")]
        public bool ListFormatsOld { get => listFormatsOld.Value; set => listFormatsOld.Value = value; }
        /// <summary>
        /// Deprecated in favor of: --compat-options -list-formats [Default] (Alias: --no-list-formats-old).
        /// </summary>
        [Obsolete("Deprecated in favor of: --compat-options -list-formats [Default] (Alias: --no-list-formats-old).")]
        public bool ListFormatsAsTable { get => listFormatsAsTable.Value; set => listFormatsAsTable.Value = value; }
        /// <summary>
        /// Deprecated in favor of: --extractor-args &quot;youtube:skip=dash&quot; (Alias: --no-youtube-include-dash-manifest).
        /// </summary>
        [Obsolete("Deprecated in favor of: --extractor-args \"youtube:skip=dash\" (Alias: --no-youtube-include-dash-manifest).")]
        public bool YoutubeSkipDashManifest { get => youtubeSkipDashManifest.Value; set => youtubeSkipDashManifest.Value = value; }
        /// <summary>
        /// Deprecated in favor of: --extractor-args &quot;youtube:skip=hls&quot; (Alias: --no-youtube-include-hls-manifest).
        /// </summary>
        [Obsolete("Deprecated in favor of: --extractor-args \"youtube:skip=hls\" (Alias: --no-youtube-include-hls-manifest).")]
        public bool YoutubeSkipHlsManifest { get => youtubeSkipHlsManifest.Value; set => youtubeSkipHlsManifest.Value = value; }
    }
}
