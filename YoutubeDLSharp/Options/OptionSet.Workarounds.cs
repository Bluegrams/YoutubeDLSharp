// <auto-generated>
// This code was partially generated by a tool.
// </auto-generated>

using System;

namespace YoutubeDLSharp.Options
{
    public partial class OptionSet
    {
        private Option<string> encoding = new Option<string>("--encoding");
        private Option<bool> legacyServerConnect = new Option<bool>("--legacy-server-connect");
        private Option<bool> noCheckCertificates = new Option<bool>("--no-check-certificates");
        private Option<bool> preferInsecure = new Option<bool>("--prefer-insecure");
        private MultiOption<string> addHeader = new MultiOption<string>("--add-header");
        private Option<bool> bidiWorkaround = new Option<bool>("--bidi-workaround");
        private Option<int?> sleepRequests = new Option<int?>("--sleep-requests");
        private Option<int?> sleepInterval = new Option<int?>("--sleep-interval");
        private Option<int?> maxSleepInterval = new Option<int?>("--max-sleep-interval");
        private Option<int?> sleepSubtitles = new Option<int?>("--sleep-subtitles");

        /// <summary>
        /// Force the specified encoding (experimental)
        /// </summary>
        public string Encoding { get => encoding.Value; set => encoding.Value = value; }
        /// <summary>
        /// Explicitly allow HTTPS connection to servers
        /// that do not support RFC 5746 secure
        /// renegotiation
        /// </summary>
        public bool LegacyServerConnect { get => legacyServerConnect.Value; set => legacyServerConnect.Value = value; }
        /// <summary>
        /// Suppress HTTPS certificate validation
        /// </summary>
        public bool NoCheckCertificates { get => noCheckCertificates.Value; set => noCheckCertificates.Value = value; }
        /// <summary>
        /// Use an unencrypted connection to retrieve
        /// information about the video (Currently
        /// supported only for YouTube)
        /// </summary>
        public bool PreferInsecure { get => preferInsecure.Value; set => preferInsecure.Value = value; }
        /// <summary>
        /// Specify a custom HTTP header and its value,
        /// separated by a colon &quot;:&quot;. You can use this
        /// option multiple times
        /// </summary>
        public MultiValue<string> AddHeader { get => addHeader.Value; set => addHeader.Value = value; }
        /// <summary>
        /// Work around terminals that lack
        /// bidirectional text support. Requires bidiv
        /// or fribidi executable in PATH
        /// </summary>
        public bool BidiWorkaround { get => bidiWorkaround.Value; set => bidiWorkaround.Value = value; }
        /// <summary>
        /// Number of seconds to sleep between requests
        /// during data extraction
        /// </summary>
        public int? SleepRequests { get => sleepRequests.Value; set => sleepRequests.Value = value; }
        /// <summary>
        /// Number of seconds to sleep before each
        /// download. This is the minimum time to sleep
        /// when used along with --max-sleep-interval
        /// (Alias: --min-sleep-interval)
        /// </summary>
        public int? SleepInterval { get => sleepInterval.Value; set => sleepInterval.Value = value; }
        /// <summary>
        /// Maximum number of seconds to sleep. Can only
        /// be used along with --min-sleep-interval
        /// </summary>
        public int? MaxSleepInterval { get => maxSleepInterval.Value; set => maxSleepInterval.Value = value; }
        /// <summary>
        /// Number of seconds to sleep before each
        /// subtitle download
        /// </summary>
        public int? SleepSubtitles { get => sleepSubtitles.Value; set => sleepSubtitles.Value = value; }
    }
}
